#!/usr/bin/env ruby

# Unlight
# Copyright (c) 2019 CPA
# Copyright (c) 2019 Open Unlight
# This software is released under the Apache 2.0 License.
# https://opensource.org/licenses/Apache2.0

$:.unshift Bundler.root.join('lib')
$:.unshift Bundler.root.join('src')
require 'bundler/setup'
require 'eventmachine'

require 'dawn/server'
require 'unlight'
require 'protocol/globalchatserver'

$stdout.sync = true
$stderr.sync = true

# TODO: Replace with Dawn::Server.name
$SERVER_NAME = "GLOBAL_CHAT_SERVER_#{Dawn::Server.port}"

EM.set_descriptor_table_size(10000) # ソケットMaxを設定
EM.epoll                            # Epollを使用するように設定。

module Unlight
  include Protocol

  EM.run do
    GlobalChatServer.setup
    EM.start_server '0.0.0.0', Dawn::Server.port, GlobalChatServer
    SERVER_LOG.info("GlobalChatServer Start: ip[#{Dawn::Server.hostname}] port[#{Dawn::Server.port}]")
    # タイマの制度を上げる
    EM.set_quantum(10)
    # 1/24でメインループを更新
    EM::PeriodicTimer.new(RAID_HELP_SEND_TIME, proc {
      begin
        GlobalChatServer.sending_help_list
      rescue => e
        SERVER_LOG.fatal("GlobalChatServer: [sending_help_list:] fatal error #{e}:#{e.backtrace}")
      end
    })

    # 1分に一回でソケットの生き死にをチェック
    EM::PeriodicTimer.new(60, proc {
      begin
        GlobalChatServer.check_connection
      rescue => e
        SERVER_LOG.fatal("GlobalChatServer: [check_connection:] fatal error #{e}:#{e.backtrace}")
      end
    })

    if DB_CONNECT_CHECK
      # 7時間に一回でDBとの接続をチェック
      EM::PeriodicTimer.new(60 * 60 * 7, proc {
        begin
          GlobalChatServer.check_db_connection
        rescue => e
          SERVER_LOG.fatal("GlobalChatServer: [check_db_connection:] fatal error #{e}:#{e.backtrace}")
        end
      })
    end

    if PRF_AUTO_CREATE_EVENT_FLAG
      EM::PeriodicTimer.new(PRF_AUTO_CREATE_INTERVAL, proc {
        begin
          GlobalChatController::auto_create_prf
        rescue => e
          SERVER_LOG.fatal("GlobalChatServer: [check_db_connection:] fatal error #{e}:#{e.backtrace}")
        end
      })

      EM::PeriodicTimer.new(PRF_AUTO_HELP_INTERVAL, proc {
        begin
          GlobalChatController::auto_prf_send_help
        rescue => e
          SERVER_LOG.fatal("GlobalChatServer: [check_db_connection:] fatal error #{e}:#{e.backtrace}")
        end
      })
    end
  end
end
