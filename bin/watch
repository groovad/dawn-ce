#!/usr/bin/env ruby

# Unlight
# Copyright (c) 2019 CPA
# Copyright (c) 2019 Open Unlight
# This software is released under the Apache 2.0 License.
# https://opensource.org/licenses/Apache2.0

$:.unshift Bundler.root.join('lib')
$:.unshift Bundler.root.join('src')
require 'bundler/setup'
require 'eventmachine'

require 'dawn/server'
require 'unlight'
require 'protocol/watchserver'

$stdout.sync = true
$stderr.sync = true

# TODO: Replace with Dawn::Server.name
$SERVER_NAME = "WATCH_SERVER_#{Dawn::Server.port}"

EM.set_descriptor_table_size(10000) # ソケットMaxを設定
EM.epoll                            # Epollを使用するように設定。

module Unlight
  include Protocol

  EM.set_descriptor_table_size(10000) # ソケットMaxを設定
  EM.epoll                            # Epollを使用するように設定。
  EM.run do
    WatchServer.setup(Dawn::Server.id, Dawn::Server.hostname, Dawn::Server.port)
    EM.start_server '0.0.0.0', Dawn::Server.port, WatchServer
    SERVER_LOG.info("WatchServer Start: ip[#{Dawn::Server.hostname}] port[#{Dawn::Server.port}]")
    # タイマの制度を上げる
    EM.set_quantum(10)
    # 1/24でメインループを更新
    EM::PeriodicTimer.new(1, proc {
      begin
        WatchServer::all_duel_update
      rescue => e
        SERVER_LOG.fatal("WatchServer: [DUEL:] fatal error #{e}:#{e.backtrace}")
      end
    })

    # 1分に一回でソケットの生き死にをチェック
    EM::PeriodicTimer.new(60, proc {
      begin
        WatchServer.check_connection
      rescue => e
        SERVER_LOG.fatal("WatchServer [check_connection:] fatal error #{e}:#{e.backtrace}")
      end
    })

    if DB_CONNECT_CHECK
      # 7時間に一回でDBとの接続をチェック
      EM::PeriodicTimer.new(60 * 60 * 7, proc {
        begin
          WatchServer.check_db_connection
        rescue => e
          SERVER_LOG.fatal("WatchServer: [check_db_connection:] fatal error #{e}:#{e.backtrace}")
        end
      })
    end
  end
end
